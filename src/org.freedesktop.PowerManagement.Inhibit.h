/*
 * Generated by gdbus-codegen 2.54.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_FREEDESKTOP_POWERMANAGEMENT_INHIBIT_H__
#define __ORG_FREEDESKTOP_POWERMANAGEMENT_INHIBIT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.PowerManagement.Inhibit */

#define XFPM_TYPE_POWER_MANAGEMENT_INHIBIT (xfpm_power_management_inhibit_get_type ())
#define XFPM_POWER_MANAGEMENT_INHIBIT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT, XfpmPowerManagementInhibit))
#define XFPM_IS_POWER_MANAGEMENT_INHIBIT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT))
#define XFPM_POWER_MANAGEMENT_INHIBIT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT, XfpmPowerManagementInhibitIface))

struct _XfpmPowerManagementInhibit;
typedef struct _XfpmPowerManagementInhibit XfpmPowerManagementInhibit;
typedef struct _XfpmPowerManagementInhibitIface XfpmPowerManagementInhibitIface;

struct _XfpmPowerManagementInhibitIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_inhibitors) (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_has_inhibit) (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_inhibit) (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_application,
    const gchar *arg_reason);

  gboolean (*handle_un_inhibit) (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation,
    guint arg_cookie);

  void (*has_inhibit_changed) (
    XfpmPowerManagementInhibit *object,
    gboolean arg_has_inhibit_changed);

};

GType xfpm_power_management_inhibit_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xfpm_power_management_inhibit_interface_info (void);
guint xfpm_power_management_inhibit_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xfpm_power_management_inhibit_complete_inhibit (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation,
    guint cookie);

void xfpm_power_management_inhibit_complete_un_inhibit (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation);

void xfpm_power_management_inhibit_complete_has_inhibit (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation,
    gboolean has_inhibit);

void xfpm_power_management_inhibit_complete_get_inhibitors (
    XfpmPowerManagementInhibit *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *inhibitors);



/* D-Bus signal emissions functions: */
void xfpm_power_management_inhibit_emit_has_inhibit_changed (
    XfpmPowerManagementInhibit *object,
    gboolean arg_has_inhibit_changed);



/* D-Bus method calls: */
void xfpm_power_management_inhibit_call_inhibit (
    XfpmPowerManagementInhibit *proxy,
    const gchar *arg_application,
    const gchar *arg_reason,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfpm_power_management_inhibit_call_inhibit_finish (
    XfpmPowerManagementInhibit *proxy,
    guint *out_cookie,
    GAsyncResult *res,
    GError **error);

gboolean xfpm_power_management_inhibit_call_inhibit_sync (
    XfpmPowerManagementInhibit *proxy,
    const gchar *arg_application,
    const gchar *arg_reason,
    guint *out_cookie,
    GCancellable *cancellable,
    GError **error);

void xfpm_power_management_inhibit_call_un_inhibit (
    XfpmPowerManagementInhibit *proxy,
    guint arg_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfpm_power_management_inhibit_call_un_inhibit_finish (
    XfpmPowerManagementInhibit *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xfpm_power_management_inhibit_call_un_inhibit_sync (
    XfpmPowerManagementInhibit *proxy,
    guint arg_cookie,
    GCancellable *cancellable,
    GError **error);

void xfpm_power_management_inhibit_call_has_inhibit (
    XfpmPowerManagementInhibit *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfpm_power_management_inhibit_call_has_inhibit_finish (
    XfpmPowerManagementInhibit *proxy,
    gboolean *out_has_inhibit,
    GAsyncResult *res,
    GError **error);

gboolean xfpm_power_management_inhibit_call_has_inhibit_sync (
    XfpmPowerManagementInhibit *proxy,
    gboolean *out_has_inhibit,
    GCancellable *cancellable,
    GError **error);

void xfpm_power_management_inhibit_call_get_inhibitors (
    XfpmPowerManagementInhibit *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xfpm_power_management_inhibit_call_get_inhibitors_finish (
    XfpmPowerManagementInhibit *proxy,
    gchar ***out_inhibitors,
    GAsyncResult *res,
    GError **error);

gboolean xfpm_power_management_inhibit_call_get_inhibitors_sync (
    XfpmPowerManagementInhibit *proxy,
    gchar ***out_inhibitors,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_PROXY (xfpm_power_management_inhibit_proxy_get_type ())
#define XFPM_POWER_MANAGEMENT_INHIBIT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_PROXY, XfpmPowerManagementInhibitProxy))
#define XFPM_POWER_MANAGEMENT_INHIBIT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_PROXY, XfpmPowerManagementInhibitProxyClass))
#define XFPM_POWER_MANAGEMENT_INHIBIT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_PROXY, XfpmPowerManagementInhibitProxyClass))
#define XFPM_IS_POWER_MANAGEMENT_INHIBIT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_PROXY))
#define XFPM_IS_POWER_MANAGEMENT_INHIBIT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_PROXY))

typedef struct _XfpmPowerManagementInhibitProxy XfpmPowerManagementInhibitProxy;
typedef struct _XfpmPowerManagementInhibitProxyClass XfpmPowerManagementInhibitProxyClass;
typedef struct _XfpmPowerManagementInhibitProxyPrivate XfpmPowerManagementInhibitProxyPrivate;

struct _XfpmPowerManagementInhibitProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XfpmPowerManagementInhibitProxyPrivate *priv;
};

struct _XfpmPowerManagementInhibitProxyClass
{
  GDBusProxyClass parent_class;
};

GType xfpm_power_management_inhibit_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfpmPowerManagementInhibitProxy, g_object_unref)
#endif

void xfpm_power_management_inhibit_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfpmPowerManagementInhibit *xfpm_power_management_inhibit_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XfpmPowerManagementInhibit *xfpm_power_management_inhibit_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xfpm_power_management_inhibit_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XfpmPowerManagementInhibit *xfpm_power_management_inhibit_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XfpmPowerManagementInhibit *xfpm_power_management_inhibit_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_SKELETON (xfpm_power_management_inhibit_skeleton_get_type ())
#define XFPM_POWER_MANAGEMENT_INHIBIT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_SKELETON, XfpmPowerManagementInhibitSkeleton))
#define XFPM_POWER_MANAGEMENT_INHIBIT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_SKELETON, XfpmPowerManagementInhibitSkeletonClass))
#define XFPM_POWER_MANAGEMENT_INHIBIT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_SKELETON, XfpmPowerManagementInhibitSkeletonClass))
#define XFPM_IS_POWER_MANAGEMENT_INHIBIT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_SKELETON))
#define XFPM_IS_POWER_MANAGEMENT_INHIBIT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XFPM_TYPE_POWER_MANAGEMENT_INHIBIT_SKELETON))

typedef struct _XfpmPowerManagementInhibitSkeleton XfpmPowerManagementInhibitSkeleton;
typedef struct _XfpmPowerManagementInhibitSkeletonClass XfpmPowerManagementInhibitSkeletonClass;
typedef struct _XfpmPowerManagementInhibitSkeletonPrivate XfpmPowerManagementInhibitSkeletonPrivate;

struct _XfpmPowerManagementInhibitSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XfpmPowerManagementInhibitSkeletonPrivate *priv;
};

struct _XfpmPowerManagementInhibitSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xfpm_power_management_inhibit_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XfpmPowerManagementInhibitSkeleton, g_object_unref)
#endif

XfpmPowerManagementInhibit *xfpm_power_management_inhibit_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_FREEDESKTOP_POWERMANAGEMENT_INHIBIT_H__ */
