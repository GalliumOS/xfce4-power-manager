/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Power_Manager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Power_Manager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfpm_manager_dbus_client_quit (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Quit", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfpm_manager_dbus_client_quit_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfpm_manager_dbus_client_quit_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfpm_manager_dbus_client_quit_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfpm_manager_dbus_client_quit_async (DBusGProxy *proxy, xfpm_manager_dbus_client_quit_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Quit", xfpm_manager_dbus_client_quit_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfpm_manager_dbus_client_restart (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Restart", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*xfpm_manager_dbus_client_restart_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
xfpm_manager_dbus_client_restart_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(xfpm_manager_dbus_client_restart_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfpm_manager_dbus_client_restart_async (DBusGProxy *proxy, xfpm_manager_dbus_client_restart_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Restart", xfpm_manager_dbus_client_restart_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfpm_manager_dbus_client_get_config (DBusGProxy *proxy, GHashTable** OUT_config, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetConfig", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), OUT_config, G_TYPE_INVALID);
}

typedef void (*xfpm_manager_dbus_client_get_config_reply) (DBusGProxy *proxy, GHashTable *OUT_config, GError *error, gpointer userdata);

static void
xfpm_manager_dbus_client_get_config_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_config;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), &OUT_config, G_TYPE_INVALID);
  (*(xfpm_manager_dbus_client_get_config_reply)data->cb) (proxy, OUT_config, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfpm_manager_dbus_client_get_config_async (DBusGProxy *proxy, xfpm_manager_dbus_client_get_config_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetConfig", xfpm_manager_dbus_client_get_config_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
xfpm_manager_dbus_client_get_info (DBusGProxy *proxy, char ** OUT_name, char ** OUT_version, char ** OUT_vendor, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetInfo", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_name, G_TYPE_STRING, OUT_version, G_TYPE_STRING, OUT_vendor, G_TYPE_INVALID);
}

typedef void (*xfpm_manager_dbus_client_get_info_reply) (DBusGProxy *proxy, char * OUT_name, char * OUT_version, char * OUT_vendor, GError *error, gpointer userdata);

static void
xfpm_manager_dbus_client_get_info_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_name;
  char * OUT_version;
  char * OUT_vendor;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_name, G_TYPE_STRING, &OUT_version, G_TYPE_STRING, &OUT_vendor, G_TYPE_INVALID);
  (*(xfpm_manager_dbus_client_get_info_reply)data->cb) (proxy, OUT_name, OUT_version, OUT_vendor, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
xfpm_manager_dbus_client_get_info_async (DBusGProxy *proxy, xfpm_manager_dbus_client_get_info_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetInfo", xfpm_manager_dbus_client_get_info_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_xfce_Power_Manager */

G_END_DECLS
