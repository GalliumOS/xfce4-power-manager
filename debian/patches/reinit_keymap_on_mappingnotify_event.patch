--- a/src/xfpm-button.c
+++ b/src/xfpm-button.c
@@ -81,12 +81,20 @@
     LAST_SIGNAL
 };
 
+guint mod_masks [] = {
+    0, /* modifier only */
+    LockMask
+};
+
 #define DUPLICATE_SHUTDOWN_TIMEOUT 4.0f
 
 static guint signals[LAST_SIGNAL] = { 0 };
 
 G_DEFINE_TYPE(XfpmButton, xfpm_button, G_TYPE_OBJECT)
 
+static void xfpm_button_setup (XfpmButton *button);
+static void xfpm_button_setup_keys (XfpmButton *button);
+
 static guint
 xfpm_button_get_key (unsigned int keycode)
 {
@@ -102,6 +110,37 @@
     return key;
 }
 
+static void
+xfpm_button_reinit (XfpmButton *button)
+{
+    guint i, j;
+    Display *display;
+
+    display = gdk_x11_get_default_xdisplay ();
+    gdk_error_trap_push ();
+    for ( i = 0; i < G_N_ELEMENTS (xfpm_key_map); i++)
+    {
+
+	if (xfpm_key_map [i].key == BUTTON_UNKNOWN)
+	    continue;
+
+	for (j = 0; j < G_N_ELEMENTS (mod_masks); j++) {
+	    XUngrabKey (display, xfpm_key_map [i].key_code,
+			mod_masks [j],
+			GDK_WINDOW_XID (button->priv->window));
+	}
+
+	xfpm_key_map [i].key_code = 0;
+	xfpm_key_map [i].key = 0;
+    }
+
+    gdk_flush ();
+    gdk_error_trap_pop ();
+    xfpm_button_setup_keys (button);
+
+    return;
+}
+
 static GdkFilterReturn
 xfpm_button_filter_x_events (GdkXEvent *xevent, GdkEvent *ev, gpointer data)
 {
@@ -111,6 +150,11 @@
     XEvent *xev = (XEvent *) xevent;
     
     button = (XfpmButton *) data;
+    if ( xev->type == MappingNotify && xev->xmapping.request == MappingKeyboard) {
+	xfpm_button_reinit(button);
+	return GDK_FILTER_CONTINUE;
+    }
+
     if ( xev->type != KeyPress  && !button->priv->power_pressed ) {
     	return GDK_FILTER_CONTINUE;
     } else if (xev->type == KEYCODE_AFTER_POWERB && button->priv->power_pressed ) {
@@ -146,32 +190,21 @@
 {
     Display *display;
     guint ret;
-    guint modmask = AnyModifier;
+    guint i;
     
     display = gdk_x11_get_default_xdisplay ();
     
     gdk_error_trap_push ();
-
-    ret = XGrabKey (display, keycode, modmask,
-		    GDK_WINDOW_XID (button->priv->window), True,
-		    GrabModeAsync, GrabModeAsync);
-		    
-    if ( ret == BadAccess )
-    {
-	g_warning ("Failed to grab modmask=%u, keycode=%li",
-		    modmask, (long int) keycode);
-	return FALSE;
-    }
-	
-    ret = XGrabKey (display, keycode, LockMask | modmask,
-		    GDK_WINDOW_XID (button->priv->window), True,
-		    GrabModeAsync, GrabModeAsync);
-			
-    if (ret == BadAccess)
-    {
-	g_warning ("Failed to grab modmask=%u, keycode=%li",
-		   LockMask | modmask, (long int) keycode);
-	return FALSE;
+    for (i = 0; i < G_N_ELEMENTS (mod_masks); i++) {
+	ret = XGrabKey (display, keycode, mod_masks [i],
+			GDK_WINDOW_XID (button->priv->window), True,
+			GrabModeAsync, GrabModeAsync);
+
+	if ( ret == BadAccess )
+	    {
+		g_warning ("Failed to grab modmask=%u, keycode=%li",
+			   0, (long int) keycode);
+	    }
     }
 
     gdk_flush ();
@@ -179,7 +212,6 @@
     return TRUE;
 }
 
-
 static gboolean
 xfpm_button_xevent_key (XfpmButton *button, guint keysym , XfpmButtonKey key)
 {
@@ -206,11 +238,8 @@
 }
 
 static void
-xfpm_button_setup (XfpmButton *button)
+xfpm_button_setup_keys (XfpmButton *button)
 {
-    button->priv->screen = gdk_screen_get_default ();
-    button->priv->window = gdk_screen_get_root_window (button->priv->screen);
-    
     if ( xfpm_button_xevent_key (button, XF86XK_PowerOff, BUTTON_POWER_OFF) )
 	button->priv->mapped_buttons |= POWER_KEY;
     
@@ -240,7 +269,15 @@
 
     if (xfpm_button_xevent_key (button, XF86XK_KbdBrightnessDown, BUTTON_KBD_BRIGHTNESS_DOWN) )
 	button->priv->mapped_buttons |= KBD_BRIGHTNESS_KEY_DOWN;
+}
+
+static void
+xfpm_button_setup (XfpmButton *button)
+{
+    button->priv->screen = gdk_screen_get_default ();
+    button->priv->window = gdk_screen_get_root_window (button->priv->screen);
 
+    xfpm_button_setup_keys(button);
     gdk_window_add_filter (NULL,
 			   xfpm_button_filter_x_events, button);
 }
