--- a/src/xfpm-battery.c
+++ b/src/xfpm-battery.c
@@ -30,6 +30,10 @@
 #include <string.h>
 #endif
 
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
 #include <gtk/gtk.h>
 #include <upower.h>
 
@@ -342,6 +346,7 @@
     guint state;
     gdouble percentage;
     guint64 to_empty, to_full;
+
     g_object_get(device,
 		 "is-present", &present,
 		 "percentage", &percentage,
@@ -370,6 +375,24 @@
     }
 }
 
+gboolean
+read_bat0(gpointer data) {
+    int fd, b;
+    char c;
+    gboolean ret;
+
+    ret = FALSE;
+    if ((fd = open("/sys/class/power_supply/BAT0/status", O_RDONLY)) != -1) {
+       b = read(fd, &c, 1);
+       close(fd);
+
+       if (b == 1)
+	 ret = TRUE;
+    }
+
+    return ret;
+}
+
 static void
 xfpm_battery_changed_cb (UpDevice *device,
 #if UP_CHECK_VERSION(0, 99, 0)
@@ -378,6 +401,8 @@
 			 XfpmBattery *battery)
 {
     xfpm_battery_refresh (battery, device);
+    //Hack to refresh the battery status
+    g_timeout_add (1500, (GSourceFunc) read_bat0, NULL);
 }
 
 static void xfpm_battery_get_property (GObject *object,
--- a/src/xfpm-battery.h
+++ b/src/xfpm-battery.h
@@ -67,6 +67,7 @@
 const gchar 		   *xfpm_battery_get_battery_name(XfpmBattery *battery);
 
 gchar 			   *xfpm_battery_get_time_left   (XfpmBattery *battery);
+gboolean                   read_bat0(gpointer data);
 
 G_END_DECLS
 
--- a/src/xfpm-manager.c
+++ b/src/xfpm-manager.c
@@ -62,6 +62,7 @@
 #include "xfpm-enum-types.h"
 #include "xfpm-dbus-monitor.h"
 #include "xfpm-systemd.h"
+#include "xfpm-battery.h"
 #include "../panel-plugins/power-manager-plugin/power-manager-button.h"
 
 static void xfpm_manager_finalize   (GObject *object);
@@ -483,6 +484,7 @@
 	XFPM_DEBUG_ENUM (action, XFPM_TYPE_LID_TRIGGER_ACTION, "LID opened");
 
 	xfpm_dpms_force_level (manager->priv->dpms, DPMSModeOn);
+        read_bat0(NULL);
     }
 }
 
--- a/src/xfpm-power.c
+++ b/src/xfpm-power.c
@@ -503,6 +503,7 @@
     g_signal_emit (G_OBJECT (power), signals [WAKING_UP], 0);
     /* Check/update any changes while we slept */
     xfpm_power_get_properties (power);
+    read_bat0(NULL);
 
 #ifdef WITH_NETWORK_MANAGER
     if ( network_manager_sleep )
